

def regions_relation_points(locs, regions, retriever, info_ret):
    """Function which computes the spatial relations between regions
    considering the shared neighbourhoods of their points.

    TODO
    ----
    - Normalization coincidence

    """

    ## 0. Compute needed variables
    regs = np.unique(regions)
    count_reg = Counter(regions)
    n_reg = regs.shape[0]
    map_reg = dict(zip(regs, range(regs.shape[0])))

    ## 1. Count coincidences
    coincidence = np.zeros((n_reg, n_reg))
    for i in xrange(locs.shape[0]):
        neighs = retriever.retrieve_neighs(locs[i, :], info_ret[i], False)[0]
        count_neighs = Counter(regs[neighs])
        t_neighs = count_neighs.keys()
        for j_nei in t_neighs:
            res = count_neighs[j_nei]/count_reg[j_nei]

        for j in range(len(neighs)):
            coincidence[map_reg[regions[i]], map_reg[regions[neighs[j]]]] += 1.
    ## 2. Normalization of coincidences

    return coincidence
