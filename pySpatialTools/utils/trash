

#### Mappers i 2016-05-31
Estinguish module

"""
mappers
-------
Mappers is a module which contains all the useful classes to perform mapping of
indices in order to control the flow of the process and make flexible the
framework to strange and complex combinations that the user could require to
apply its desired methods.
"""


#### Map vals i 2016-03-04

#    def _set_rel_pos(self, key_rel_pos):
#        """
#        * None
#        * np.array len(neighs) -> unique rel_pos for iss and ks
#        * list of arrays len(iss) -> unique rel_pos for ks
#        * list of lists of arrays -> complete
#        """
#        print '-'*200
#        print key_rel_pos
#        if key_rel_pos is None:
#            specialkey = 1
#        elif type(key_rel_pos) == np.ndarray:
#            specialkey = 2
#        elif type(key_rel_pos) == list:
#            if len(key_rel_pos) == 0:
#                specialkey = 3
#            elif type(key_rel_pos[0]) == list:
#                if len(key_rel_pos[0]) == 0:
#                    specialkey = 4
#                elif type(key_rel_pos[0][0]) == list:
#                    specialkey = 5
#                else:
#                    specialkey = 0
#            elif type(key_rel_pos) == np.ndarray:
#                specialkey = 10
#            else:
#                specialkey = 0
#        else:
#            specialkey = 0
#        assert(specialkey != 0)
#
#        if key_rel_pos is None:
#            aux = [[[key_rel_pos]]*len(self.ks)]*len(self.iss)
#            self.sp_relative_pos = aux
#        elif type(key_rel_pos):
#            pass
#        elif not any(key_rel_pos):
#            self.sp_relative_pos = None
#        elif '__getitem__' not in dir(key_rel_pos):
#            aux = [[[key_rel_pos]]*len(self.ks)]*len(self.iss)
#            self.sp_relative_pos = aux
#        elif '__getitem__' not in dir(key_rel_pos[0]):
#            aux = [[key_rel_pos]*len(self.ks)]*len(self.iss)
#            self.sp_relative_pos = aux
#        elif '__getitem__' not in dir(key_rel_pos[0][0]):
#            aux = [key_rel_pos]*len(self.ks)
#            self.sp_relative_pos = aux
#        else:
#            self.sp_relative_pos = key_rel_pos



#### Map vals i 2016-02-25

#        if maps_vals_i is None:
#            self._maps_vals_i = Map_Vals_i(lambda self, i, k=0: i)
#        else:
#            if type(maps_vals_i).__name__ == 'function':
#                self._maps_vals_i = Map_Vals_i(lambda self, i, k=0: i)
#            else:
#                self._maps_vals_i = Map_Vals_i(maps_vals_i)


##### Mapping tools 2016-02-23

class DummyMap:
    "Dummy map which returns the index input."

    _n = 0

    def __init__(self, n=0):
        self._n = n

    def __getitem__(self, i):
        return i

    def __len__(self):
        return self._n


def create_mapping_valsi(sp_typemodel='', mapper=None):
    bool0 = sp_typemodel == '' or type(sp_typemodel) != str
    if bool0 and mapper is None:
        if sp_typemodel not in ['matrix', 'correlation']:
            raise TypeError("Not correct inputs for defining the mapping.")
    if mapper is not None:
        # Check
        mapper[0]
    else:
        if sp_typemodel == 'correlation':
            raise TypeError("Not correct inputs for defining the mapping.")
        else:
            mapper = DummyMap()
    return mapper

class DummyMap:
    "Dummy map which returns the index input."

    _n = 0

    def __init__(self, n=0):
        self._n = n

    def __getitem__(self, i):
        return i

    def __len__(self):
        return self._n


def create_mapping_valsi(sp_typemodel='', mapper=None):
    bool0 = sp_typemodel == '' or type(sp_typemodel) != str
    if bool0 and mapper is None:
        if sp_typemodel not in ['matrix', 'correlation']:
            raise TypeError("Not correct inputs for defining the mapping.")
    if mapper is not None:
        # Check
        mapper[0]
    else:
        if sp_typemodel == 'correlation':
            raise TypeError("Not correct inputs for defining the mapping.")
        else:
            mapper = DummyMap()
    return mapper
